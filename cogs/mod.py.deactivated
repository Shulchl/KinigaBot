from discord.ext import commands
import discord.utils
import discord, discord.utils, uuid, random
from discord import File as dFile
from base.image import ImageCaptcha
from discord_components import Button, ButtonStyle, Select, SelectOption, ComponentsBot

class NoPrivateMessages(commands.CheckFailure):
    pass

def guild_only():
    async def predicate(ctx):
        if ctx.guild is None:
            raise NoPrivateMessages('Esse comando não pode ser usado em mensagens privadas!')
        return True
    return commands.check(predicate)


class Mod(commands.Cog, name='Mod'):

    def __init__(self, client):
        self.client = client

    @guild_only() # EDIT ROLE COLOR #
    @commands.command(name='setup')
    @commands.has_permissions(administrator=True) 
    async def setup(self, ctx, role : discord.Role = None) -> None:
        try:
            await ctx.message.delete()
            await self.db.fetch("CREATE TABLE IF NOT EXISTS setup (guild TEXT NOT NULL, message_id TEXT NOT NULL, role_id TEXT NOT NULL)")
        except Exception as e:
            raise e
        
        def validation(currentMessage):
            return currentMessage.author == ctx.author and currentMessage.channel == ctx.channel
        
        emb = discord.Embed(title='Seja bem vindo(a) à KINIGA BRASIL!', color=0x2ecc71,
                        description=f'Aperte o botão para podermos verificar sua conta e te dar acesso ao servidor! '
                                    f':smiley:\n')
        emb.set_image(url="https://www.kiniga.com/wp-content/uploads/2017/10/New-Logo-Inv-150px.png")
        msg_id = await ctx.send( 
                           embed=emb, 
                           components=[
                                       Button(style=ButtonStyle.green, 
                                              label="VERIFICAR", 
                                              custom_id="VERIFY",
                                              emoji="✅")])
        
        message_id = msg_id.id
            
        try:
            
            if not role:
                
                await ctx.send("Qual cargo servirá como verificado? (Apenas ID)", delete_after=10)
                msg = await self.bot.wait_for('message', timeout=15.0, check=validation)
                try:
                    role = discord.utils.find(lambda r: r.id == int(msg.content), ctx.guild.roles) or discord.utils.find(lambda r: r.name == "VERIFICADO", ctx.guild.roles)
                    if not role:
                        role = await ctx.guild.create_role(name="VERIFICADO")
                        await ctx.reply(f"Não foi possível encontrar um cargo o ID fornecido, portando criei um novo.", delete_after=5)
                except Exception as e:
                    raise e
                    
            try:
                await self.db.fetch(f"INSERT INTO setup VALUES ({ctx.guild.id}, {message_id}, {role.id})")
            except Exception as e:
                raise e
                        
        except Exception as e:
            raise e
        await msg.delete()
        await ctx.send("Configurado!", delete_after=5)
    
    def randStr(self, string_length):
        """Returns a random string of length string_length."""
        random = str(uuid.uuid4()) # Convert UUID format to a Python string.
        random = random.upper() # Make all characters uppercase.
        random = random.replace("-","") # Remove the UUID '-'.
        return random[0:string_length] # Return the random string.
    
    def get_captcha(self, interaction):
        strings = [self.randStr(6),
                    self.randStr(6),
                    self.randStr(6),
                    self.randStr(6)]
        self.chosen = random.choice(strings)
        #await ctx.send(strings)
        #await ctx.send(chosen)
        self.images = ImageCaptcha(fonts=[
            'src/fonts/BarlowSemiCondensedBold.ttf',
            'src/fonts/MontserratBold.ttf', 
            'src/fonts/MontserratExtraBold.ttf', 
            'src/fonts/OpenSansBold.ttf', 
            'src/fonts/MontserratRegular.ttf'])
        data = self.images.generate(str(self.chosen))
        embed=discord.Embed(title="Selecione a opção correspondente à imagem para continuar.", color=0x0f83ff)
        file = dFile(fp=data, filename='captcha.png')
        embed.set_image(url="attachment://captcha.png")
        return interaction.respond(
                                    file=file,
                                    embed=embed,
                                    components=[
                                        Select(
                                            placeholder="CLIQUE PARA ESCOLHER!",
                                            options=[
                                                SelectOption(label=str(strings[0]), value=str(strings[0])),
                                                SelectOption(label=str(strings[1]), value=str(strings[1])),
                                                SelectOption(label=str(strings[2]), value=str(strings[2])),
                                                SelectOption(label=str(strings[3]), value=str(strings[3])),
                                                
                                            ],custom_id="verification"
                                            
                                            
                                        )
                                    ],
                                    )
    
    @commands.Cog.listener()
    async def on_button_click(self, interaction):
        try:
            result = await self.db.fetch(f"SELECT message_id, role_id FROM setup WHERE guild = (\'{interaction.guild.id}\')")
        except Exception as e:
            raise e
        if result:
            if interaction.message.id == int(result[0][0]):
                    guild = self.bot.get_guild(interaction.guild.id)
                    if guild is None:
                        return print("Servidor não encontrada\nFinalizando processo...")
                    try:
                        discord.utils.get(guild.roles, id=int(result[0][1]))
                    except:
                        return print("Cargo não encontrado\nFinalizando processo...")
                    member = guild.get_member(interaction.user.id)
                    
                    if member is None:
                        return
                    try:
                        await self.get_captcha(interaction)
                        
                        #await message.respond(f"{strings}", file=dFile(fp=data, filename='captcha.png'))
                        #await member.add_roles(role)
                    except Exception as e:
                        raise e
    @commands.Cog.listener()
    async def on_select_option(self, interaction):
        label = interaction.values
        for i in label:
            try:
                if i in self.chosen:
                    try:
                        result = await self.db.fetch(f"SELECT role_id FROM setup WHERE guild = (\'{interaction.guild.id}\')")
                    except Exception as e:
                        raise e
                    if result:
                        try:
                            role = discord.utils.get(interaction.guild.roles, id=int(result[0][0])) or discord.utils.find(lambda r: r.name == "VERIFICADO", interaction.guild.roles)
                        except:
                            role = await interaction.guild.create_role(name="VERIFICADO")
                            
                        await interaction.respond(content=f"{interaction.user.mention}, você está verificado e já pode conversar no servidor!")
                        return await interaction.user.add_roles(role)
                else:
                    await self.get_captcha(interaction)
                    await interaction.respond(content=f"{interaction.user.mention}, você está verificado e já pode conversar no servidor!")
            except Exception as e:
                await interaction.respond(content=f"Captcha inválido. Tente novamente.")
                if interaction.custom_id == "verification":
                    await self.get_captcha(interaction)
                    await interaction.respond(content=f"{interaction.user.mention}, você está verificado e já pode conversar no servidor!")
        

def setup(client):
    client.add_cog(Mod(client))
